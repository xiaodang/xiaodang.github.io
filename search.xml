<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>TCP超时问题调试</title>
      <link href="2021/02/03/TCP%E8%B6%85%E6%97%B6%E9%97%AE%E9%A2%98%E8%B0%83%E8%AF%95/"/>
      <url>2021/02/03/TCP%E8%B6%85%E6%97%B6%E9%97%AE%E9%A2%98%E8%B0%83%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<p>最近有一个项目，使用的Node的Request类库来进行HTTP请求获取数据，每个HTTP请求都要用到短效代理。为了提高可用性，加入了重试机制，如果代理失效，则更换代理重试。为了防止代理速度过慢，设置了timeout参数，该参数在文档中的说明是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">timeout - integer containing number of milliseconds, controls two timeouts.</span><br><span class="line">Read timeout: Time to wait for a server to send response headers (and start the response body) before aborting the request.</span><br><span class="line">Connection timeout: Sets the socket to timeout after timeout milliseconds of inactivity. Note that increasing the timeout beyond the OS-wide TCP connection timeout will not have any effect (the default in Linux can be anywhere from 20-120 seconds)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>如何调试招商银行App内置的webview</title>
      <link href="2020/12/20/%E5%A6%82%E4%BD%95%E8%B0%83%E8%AF%95%E6%8B%9B%E5%95%86%E9%93%B6%E8%A1%8CApp%E5%86%85%E7%BD%AE%E7%9A%84webview/"/>
      <url>2020/12/20/%E5%A6%82%E4%BD%95%E8%B0%83%E8%AF%95%E6%8B%9B%E5%95%86%E9%93%B6%E8%A1%8CApp%E5%86%85%E7%BD%AE%E7%9A%84webview/</url>
      
        <content type="html"><![CDATA[<p>最近招商银行有一个10元风暴的活动，集喵喵，最高可以兑换5000元礼品卡。但是听同事说，这个兑换需要拼手速。作为工程师，能用程序解决的，坚决不用手解决。（其实是想练习一下遗忘已久的逆向技能</p><h3 id="分析思路"><a href="#分析思路" class="headerlink" title="分析思路"></a>分析思路</h3><p>第一次尝试，先用Charles抓包，但是发现设置代理之后打开银行app直接闪退，果然大银行，对HTTPS证书进行了校验。失败。<br>第二次尝试，用rvictl创建iphone的虚拟网络端口，然后用Wireshark监听所有流量，发现确实走的是HTTPS协议，不是tcp。但是由于内容都是加密的，没什么其他收获。<br>第三次，那就只有祭出必杀器。越狱。</p><h3 id="可行的方案"><a href="#可行的方案" class="headerlink" title="可行的方案"></a>可行的方案</h3><ul><li><p>首先对手机进行越狱，由于备用机是iOS13.7，目前没有完美越狱，但是checkra1n可以进行非完美越狱。checkra1n的官网是checkra.in,有一个冒充的钓鱼网站要小心。根据官网的越狱步骤，遇到了一点小问题，我的手机就是无法进入DFU模式，最后把Tyep C的线换成了USB的线才搞定。:(</p></li><li><p>由于银行对证书有检测，所以必须要干掉证书的检测。github上有一个项目SSL Kill Switch 2可以做这件事儿。而且很顺利，屏蔽掉证书检测之后，可以成功的捕获到所有的HTTPS数据包，但是分析数据包之后，发现并没有什么作用，因为内容都是加密的。</p></li><li><p>既然数据包没用，那我们就从UI着手，大不了最后模拟点击或者hook事件重放就可以了。既然是内嵌的Webview，第一个想到的就是通过Safair的开发工具进行调试。但是release的App是无法进行调试，因为大部分都不会开启这个功能。但是既然都越狱了，自然有办法。github上的GlobalWebinspect项目可以帮助我们，安装之后，发现可以进行调试了。</p></li><li><p>既然可以调试web了，那就欢迎进入web的世界～ 剩下的，就是抽丝剥茧找到相应的事件去触发了。</p></li></ul><p>其实，获取礼品不是目的。如何做到，才能技术该追求的。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 逆向 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用MutationObserver API追踪DOM的修改</title>
      <link href="2020/12/18/%E5%88%A9%E7%94%A8MutationObserver-API%E8%BF%BD%E8%B8%AADOM%E7%9A%84%E4%BF%AE%E6%94%B9/"/>
      <url>2020/12/18/%E5%88%A9%E7%94%A8MutationObserver-API%E8%BF%BD%E8%B8%AADOM%E7%9A%84%E4%BF%AE%E6%94%B9/</url>
      
        <content type="html"><![CDATA[<p>之前写爬虫的时候，经常需要从界面入手，找到自己想要的数据，然后看网络请求，来搜索是哪个api返回的数据，一般情况下，都能从网络请求中发现想要的数据。但是当数据做了混淆之后，很多数据是没有办法直接从api中搜索到的。这时候就可以用到<code>MutationObserver</code> API。</p><p>MDN上的描述<code>The MutationObserver interface provides the ability to watch for changes being made to the DOM tree. </code>。简单翻译一下就是，这个接口提供了监控DOM树变化的能力。</p><h3 id="MDN的例子"><a href="#MDN的例子" class="headerlink" title="MDN的例子"></a>MDN的例子</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; Select the node that will be observed for mutations</span><br><span class="line">const targetNode &#x3D; document.getElementById(&#39;some-id&#39;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Options for the observer (which mutations to observe)</span><br><span class="line">const config &#x3D; &#123; attributes: true, childList: true, subtree: true &#125;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Callback function to execute when mutations are observed</span><br><span class="line">const callback &#x3D; function(mutationsList, observer) &#123;</span><br><span class="line">    &#x2F;&#x2F; Use traditional &#39;for loops&#39; for IE 11</span><br><span class="line">    &#x2F;&#x2F;如果需要调试的话，只需要在callback里面执行debugger就可以了</span><br><span class="line">    for(const mutation of mutationsList) &#123;</span><br><span class="line">        if (mutation.type &#x3D;&#x3D;&#x3D; &#39;childList&#39;) &#123;</span><br><span class="line">            console.log(&#39;A child node has been added or removed.&#39;);</span><br><span class="line">        &#125;</span><br><span class="line">        else if (mutation.type &#x3D;&#x3D;&#x3D; &#39;attributes&#39;) &#123;</span><br><span class="line">            console.log(&#39;The &#39; + mutation.attributeName + &#39; attribute was modified.&#39;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Create an observer instance linked to the callback function</span><br><span class="line">const observer &#x3D; new MutationObserver(callback);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Start observing the target node for configured mutations</span><br><span class="line">observer.observe(targetNode, config);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Later, you can stop observing</span><br><span class="line">observer.disconnect();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rvictl-iOS网络数据分析工具</title>
      <link href="2020/12/13/rvictl-iOS%E7%BD%91%E7%BB%9C%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7/"/>
      <url>2020/12/13/rvictl-iOS%E7%BD%91%E7%BB%9C%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<p>之前在iPhone上抓包都是用的<code>Charlse</code>,但是只能捕获HTTP和HTTPS对流量。</p><p>今天发现了苹果的一个工具叫<code>rvictl</code>，rvi是Remote Virtual Interface的缩写，表示远程虚拟接口。把iPhone通过USB连接电脑之后，通过rvictl就可以创建一个虚拟接口。接下来就可以用tcpdump或者wireshark来监听这个网络接口上的流量。</p><p>但是，由于系统升级了Big Sur，目前这个工具在我的电脑上暂时无法使用。只能等下来的版本再测试一下。</p>]]></content>
      
      
      
        <tags>
            
            <tag> macOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>monkeyDev开发</title>
      <link href="2020/12/03/monkeyDev%E5%BC%80%E5%8F%91/"/>
      <url>2020/12/03/monkeyDev%E5%BC%80%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<p>今天进行iOS逆向开发，肯定会遇到很多坑，之前的坑都踩过，但是没有记录，这次记录一下。</p><h3 id="坑1-签名失败"><a href="#坑1-签名失败" class="headerlink" title="坑1 签名失败"></a>坑1 签名失败</h3><p>安装完后mokeyDev之后，在XCode创建一个新项目，但是对于一直报错无法签名，最后查资料可以在target的Build Settings里面增加一个自定义配置，<code>CODE_SIGNING_ALLOWED=NO</code>，最后编译成功。</p><h3 id="坑2-无法找到libstdc-类库"><a href="#坑2-无法找到libstdc-类库" class="headerlink" title="坑2 无法找到libstdc++类库"></a>坑2 无法找到libstdc++类库</h3><p>这个比较常见，是因为xcode移除了libstdcc，如果类库依赖的话，只需要找到放在对应目录下就可以。</p><h3 id="如何查看ipa是否加密"><a href="#如何查看ipa是否加密" class="headerlink" title="如何查看ipa是否加密"></a>如何查看ipa是否加密</h3><p>otool -l Target | grep -A 4 LC_ENCRYPTION_INFO</p><h3 id="cycrpt-打印当前界面的UI结构"><a href="#cycrpt-打印当前界面的UI结构" class="headerlink" title="cycrpt 打印当前界面的UI结构"></a>cycrpt 打印当前界面的UI结构</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cy# UIApp.keyWindow.recursiveDescription().toString()</span><br><span class="line">c# [[UIApp keyWindow] _autolayoutTrace].toString()</span><br></pre></td></tr></table></figure><h3 id="find-controller"><a href="#find-controller" class="headerlink" title="find controller"></a>find controller</h3><p>var a = UIApp.windows[0].rootViewController.childViewControllers</p><h3 id="lldb-debug-by-address"><a href="#lldb-debug-by-address" class="headerlink" title="lldb debug by address"></a>lldb debug by address</h3><p>iproxy 9999 9999<br>iphone: debugserver localhost:9999 -x backboard -a 1597<br>mac: lldb :process connect connect://localhost:9999</p><p>breakpoint set -a 0x00000012<br>po [myObject valueForKey:@”aProperty”]<br>查看内存偏移 image list -f -o<br>查找内存地址 正则表达式 image lookup -rn<br>breakpoint set -n “-[UIViewController viewDidLoad]” -C “po $arg1” -G1 // 打印所有符合条件的实例对象</p><h3 id="frida"><a href="#frida" class="headerlink" title="frida"></a>frida</h3><p>objectc方法追踪<br>frida-trace -U -f cn.10086.app -m “-[CMClient requestBusinessCode:parameter:fource:success:failuer:]”</p><p>观察函数调用<br>frida –codeshare mrmacete/objc-method-observer -U  -p 6740<br>加密函数追踪<br> frida -U  -l /Users/xiaodang/XDDATA/develop/practice/frida-learn/CC_hook.js –no-pause  -p 947<br>observeClass()<br>observeSomething(“-[NSURLRequest <em>setValue:forHTTPHeaderField</em>]”)</p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>macOS如何打开新窗口执行脚本</title>
      <link href="2020/11/16/macOS%E5%A6%82%E4%BD%95%E6%89%93%E5%BC%80%E6%96%B0%E7%AA%97%E5%8F%A3%E6%89%A7%E8%A1%8C%E8%84%9A%E6%9C%AC/"/>
      <url>2020/11/16/macOS%E5%A6%82%E4%BD%95%E6%89%93%E5%BC%80%E6%96%B0%E7%AA%97%E5%8F%A3%E6%89%A7%E8%A1%8C%E8%84%9A%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<p>今天需要写一个脚本同时ssh连接到不同到服务器执行任务，并实时观察log，所以需要写一个脚本打开新的terminal，查找后发现可以用macOS的osascript命令，记录一下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">osascript -e <span class="string">&#x27;tell application &quot;Terminal&quot; to do script &quot;ls&quot;&#x27;</span></span><br></pre></td></tr></table></figure><p>由于连接每次连接ssh都需要输入yes来信任host，可以在<code>～/.ssh/config</code>文件中添加<code>StrictHostKeyChecking no</code>来取消检查，这也可以方便脚本的执行，但是用完记得取消，否则这样做是不安全的。</p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> macOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>libuv初探</title>
      <link href="2020/11/12/libuv%E5%88%9D%E6%8E%A2/"/>
      <url>2020/11/12/libuv%E5%88%9D%E6%8E%A2/</url>
      
        <content type="html"><![CDATA[<p>今天研究了一下Node使用的异步IO框架libuv,下面一张图显示了livuv在Node架构中的位置。</p><p><img src="https://cdn.jsdelivr.net/gh/xiaodang/blog-image/img/20201112091257.png"></p><h2 id="libuv是什么"><a href="#libuv是什么" class="headerlink" title="libuv是什么"></a>libuv是什么</h2><p>libuv是一个高性能的，事件驱动的I/O库，并且提供了跨平台（如windows, linux）的API。</p><h2 id="libuv架构"><a href="#libuv架构" class="headerlink" title="libuv架构"></a>libuv架构</h2><p><img src="https://cdn.jsdelivr.net/gh/xiaodang/blog-image/img/20201112091634.png"></p><p>左侧部分是网络I/O相关的请求，右侧部分是由文件I/O, DNS Ops以及User code组成的请求。对于Network I/O和以File I/O为代表的另一类请求，异步处理的机制是不一样的。</p><p>对于Network I/O相关的请求， 根据OS平台不同，分别使用Linux上的epoll，OSX和BSD类OS上的kqueue，SunOS上的event ports以及Windows上的IOCP机制。</p><p>而对于File I/O为代表的请求，则使用thread pool。利用thread pool的方式实现异步请求处理，在各类OS上都能获得很好的支持。</p><h2 id="I-O-loop"><a href="#I-O-loop" class="headerlink" title="I/O loop"></a>I/O loop</h2><p>libuv强制使用异步的，事件驱动的编程风格。它的核心工作是提供一个event-loop，还有基于I/O和其它事件通知的回调函数。libuv还提供了一些核心工具，例如定时器，非阻塞的网络支持，异步文件系统访问，子进程等。</p><p>在事件驱动编程中，程序会关注每一个事件，并且对每一个事件的发生做出反应。libuv会负责将来自操作系统的事件收集起来，或者监视其他来源的事件。这样，用户就可以注册回调函数，回调函数会在事件发生的时候被调用。</p><p><img src="https://cdn.jsdelivr.net/gh/xiaodang/blog-image/img/20201112092121.png"></p><h2 id="HELLOWORLD"><a href="#HELLOWORLD" class="headerlink" title="HELLOWORLD"></a>HELLOWORLD</h2><p>了解完之后，必须要下载类库然后了自己使用一些才能更深入的了解工作机制。由于对于C的了解并不是太多，在开发环境配置、编译方面遇到了不少问题。</p><ul><li>如何安装类库?</li><li>如何include .h文件（c的头文件）</li><li>如何链接编译</li></ul><p>由于我的是macOS环境和vscode IDE，所以使用vcpkg管理工具来安装libuv的包文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vcpkg install libuv</span><br></pre></td></tr></table></figure><p>创建helloworld.c文件，在头部引入<code>#include &lt;uv.h&gt;</code>,但是提示无法找到<code>uv.h</code>,需要在<code>.vscode/c_cpp_properties.json</code>配置文件的属性includePath中加入<code>$&#123;vcpkgRoot&#125;/x64-osx/include</code>,其实也就是体检一个path，让编译器去这里寻找<code>.h</code>文件，最后还是无法build，提示<code>ld: library not found for -llibuv</code>,google了半太难都无法找到方案，其实很简单，就是链接阶段出错了，无法找libuv，最后直接<code>man ld</code> 查看ld的参数说明，然后在<code>.vscode/tasks.json</code>的args中加入<code>&quot;-I/usr/local/var/vcpkg/installed/x64-osx/include&quot;,&quot;-L/usr/local/var/vcpkg/installed/x64-osx/lib&quot;</code>即可。下面是HELLOWORLD的完整代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;uv.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;uv/version.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">/* code */</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;version:%d\n&quot;</span>, UV_VERSION_MAJOR);</span><br><span class="line">  <span class="keyword">uv_loop_t</span> *loop = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">uv_loop_t</span>));</span><br><span class="line">  uv_loop_init(loop);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Now quitting.\n&quot;</span>);</span><br><span class="line">  uv_run(loop, UV_RUN_DEFAULT);</span><br><span class="line">  uv_loop_close(loop);</span><br><span class="line">  <span class="built_in">free</span>(loop);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> libuv </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis分布式锁的实现</title>
      <link href="2020/11/02/redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
      <url>2020/11/02/redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<p>在并发场景下，经常需要对某些资源进行互斥的操作。在单服务器系统我们常用本地锁来避免并发带来的问题，然而，当服务采用集群方式部署时，本地锁无法在多个服务器之间生效，这时候保证数据的一致性就需要分布式锁来实现。</p><p>比如用户在网页和手机端同时下单，对余额进行减操作，如果没有合理的锁对余额进行保护，那最终用户对余额很有可能就会变得错乱。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">用户A网页端                               用户A手机端</span><br><span class="line"></span><br><span class="line">1 balance&#x3D;db.getUserBalance()</span><br><span class="line">2                                        balance&#x3D;db.getUserBalance()</span><br><span class="line">3 db.saveUserBalance(balance-100)</span><br><span class="line">4                                        db.saveUserBalance(balance-100)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="redis单例模式下的正确实现"><a href="#redis单例模式下的正确实现" class="headerlink" title="redis单例模式下的正确实现"></a>redis单例模式下的正确实现</h2><p>要正确的实现锁，必须保证:</p><ul><li>互斥 - 同一时间只能有一个客户端持有锁</li><li>无死锁 - 即使锁定资源的客户端崩溃了，其他客户端也可以获得锁</li><li>锁的身份验证 - 锁的释放必须由锁的持有客户端释放，保证锁的安全释放</li></ul><p>在redis中可以通过设置<code>SET NX PX </code>给资源上锁，NX表示只会在资源不存在的情况下设置成功，PX表示这个资源的过期时间(单位:毫秒),同时key的值被设置成了一个随机的值，这个值必须在所有的客户端中保证唯一。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SET resource_name my_random_value NX PX 30000</span><br></pre></td></tr></table></figure><p><code>NX</code>保证了资源的互斥</p><p><code>PX</code>保证了无死锁。即便持有锁的客户端崩溃了，也会在过期时间之后，释放锁</p><p><code>my_random_value</code>随机值保证了锁的安全释放。如果持有锁的A客户端由于某些阻塞操作导致超过了锁的过期时间，于是锁被自动释放，B客户端获取到了锁，而A又主动释放锁，此时A就会释放B所持有的锁。而随机值可以在A客户端删除锁时验证锁是否由A设置。</p><p>判断随机值，并且删除资源的操作也必须保证原子行，而<code>redis</code>没有这样的命令，所以必须通过<code>lua</code>脚本来实现:</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> redis.call(<span class="string">&quot;get&quot;</span>,KEYS[<span class="number">1</span>]) == ARGV[<span class="number">1</span>] <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">return</span> redis.call(<span class="string">&quot;del&quot;</span>,KEYS[<span class="number">1</span>])</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>哈希函数的应用</title>
      <link href="2020/10/29/%E5%93%88%E5%B8%8C%E5%87%BD%E6%95%B0%E7%9A%84%E5%BA%94%E7%94%A8/"/>
      <url>2020/10/29/%E5%93%88%E5%B8%8C%E5%87%BD%E6%95%B0%E7%9A%84%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>在计算机程序设计中，<code>哈希函数</code>(又名散列函数)把文本或者其他数据映射为整数。通常不同的输入对应不同的输出，但是有时候会发生碰撞(<code>collision</code>碰撞就是不同的输入对应相同的输出)。</p><p><code>加密哈希函数</code>把文本或者二进制数据转化为<code>固定长度</code>的<code>哈希值</code>，并且具有<code>抗碰撞性</code>和<code>不可逆性</code>。</p><h2 id="软件工程里的哈希"><a href="#软件工程里的哈希" class="headerlink" title="软件工程里的哈希"></a>软件工程里的哈希</h2><p>在程序中<code>哈希函数</code>通常被用来实现数据结构<code>hash-table</code>（哈希表，或者关联数组，或者字典）。</p><p>python中的数据类型<code>dict</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">dict</span>=&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;xiaoye&quot;</span>,<span class="string">&quot;age&quot;</span>:<span class="number">29</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="加密哈希函数"><a href="#加密哈希函数" class="headerlink" title="加密哈希函数"></a>加密哈希函数</h2><p>在密码学中，<code>哈希函数</code>将任意大小的输入数据(例如文本消息)转换为固定大小的结果(例如256位)，被称为<code>哈希值</code>(或哈希码、消息摘要)。在计算机密码学中使用的哈希函数(哈希算法)被称为“<code>加密哈希函数</code>”。<code>SHA3-256</code>就是一个加密哈希函数，把任意输入转化为256位，例如，我们可以使用它计算helloworld的哈希值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib,binascii</span><br><span class="line">sha3_256hash=hashlib.sha3_256(<span class="string">&#x27;helloworld&#x27;</span>.encode(<span class="string">&#x27;ascii&#x27;</span>)).digest()</span><br><span class="line">print(<span class="string">&quot;SHA3-256(&#x27;helloworld&#x27;) =&quot;</span>, binascii.hexlify(sha3_256hash))</span><br><span class="line"><span class="comment"># output:92dad9443e4dd6d70a7f11872101ebff87e21798e4fbb26fa4bf590eb440e71b</span></span><br></pre></td></tr></table></figure><h2 id="安全哈希函数"><a href="#安全哈希函数" class="headerlink" title="安全哈希函数"></a>安全哈希函数</h2><p>在过去，软件开发人员提出了许多加密哈希算法。其中一些被破坏了(如MD5和SHA1)，但仍有一些仍然是安全的(如SHA-2、SHA-3和BLAKE2)</p><h3 id="SHA-2"><a href="#SHA-2" class="headerlink" title="SHA-2"></a>SHA-2</h3><p><code>SHA-2</code>是一组强加密哈希函数:<code>SHA-256</code>(256位哈希)、<code>SHA-384</code>(384位哈希)、<code>SHA-512</code>(512位哈希)等等。</p><p> 它基于加密概念<a href="https://en.wikipedia.org/wiki/Merkle%E2%80%93Damg%C3%A5rd_construction">Merkle–Damgård construction</a>，被认为是高度安全的。<code>SHA-2</code>在美国作为官方密码标准发布。</p><p> <code>SHA-2</code>被开发人员和密码学广泛使用，被认为在密码学上足够强大，可以用于现代商业应用程序。</p><h3 id="SHA-3"><a href="#SHA-3" class="headerlink" title="SHA-3"></a>SHA-3</h3><p> <code>SHA-3</code>(以及它的变体<code>SHA3-224</code>, <code>SHA3-256</code>, <code>SHA3-384</code>, <code>SHA3-512</code>)比同样散列长度的<code>SHA-2</code>(<code>SHA-224</code>, <code>SHA-256</code>, <code>SHA-384</code>, <code>SHA-512</code>)更加安全。例如，对于相同的散列长度(256位)，<code>SHA3-256</code>比<code>SHA-256</code>具有更多的加密强度。</p><p><code>SHA-3</code>被认为是高度安全的，并作为美国官方推荐的加密标准发布。</p><p> SHA-256在比特币区块链中被广泛使用，例如用于识别交易散列，以及用于矿工所进行的挖掘工作证明。</p><h2 id="不安全的哈希函数"><a href="#不安全的哈希函数" class="headerlink" title="不安全的哈希函数"></a>不安全的哈希函数</h2><p>旧的哈希算法如<code>MD5</code>、<code>SHA-0</code>和<code>SHA-1</code>被认为是不安全的。所以不要再使用这些哈希函数。</p><h2 id="哈希函数的应用"><a href="#哈希函数的应用" class="headerlink" title="哈希函数的应用"></a>哈希函数的应用</h2><h3 id="文件完整性"><a href="#文件完整性" class="headerlink" title="文件完整性"></a>文件完整性</h3><p>用户从网上下载文件的过程中，为了保证文件是原始的，没有被损坏，一般文件提供方都会在网站上给出文件的哈希值(<code>MD5</code>值或者<code>SHA256</code>校验值等)，这样用户下载文件后就可以用同样的哈希算法来计算哈希值，通过与官网的哈希值对比，就能知道文件是不是原始的。</p><p>例如openssl官网的下载页面分别给出了文件的<code>SHA256</code>和<code>SHA1</code>两种哈希值<br><img src="https://cdn.jsdelivr.net/gh/xiaodang/blog-image/img/20201029210654.png"></p><p>我下载了openssl-3.0.0-alpha7.tar.gz这个文件，在mac计算<code>SHA1</code>哈希值的命令如下</p><p><code>$ shasum -a 1  openssl-3.0.0-alpha7.tar.gz</code></p><p>输出的结果是1d05682f62b34038a37b196c7c43a21013f5f507，通过比对官网的<code>SHA 1</code>值，完全一样，说明下载的文件是原始的。</p><h3 id="存储密码"><a href="#存储密码" class="headerlink" title="存储密码"></a>存储密码</h3><p>哈希函数还可以用来存储密码和验证密码。开发者通常不会直接保存用户的明文密码，而是保存密码的hash值，这样防止保存密码的文件或数据库泄漏后，用户的密码也随之泄漏。当然，如果要更加安全的保存用户的密码，不能简单的使用<code>MD5</code>或者MD5+盐（salt），因为这些哈希函数被证明是不安全的，需要用<code>密钥派生函数</code>(Key derivation function)。</p><h3 id="生成唯一ID-（Generate-Unique-ID）"><a href="#生成唯一ID-（Generate-Unique-ID）" class="headerlink" title="生成唯一ID （Generate Unique ID）"></a>生成唯一ID （Generate Unique ID）</h3><p>为文档/消息生成几乎唯一的ID。加密哈希函数可以基于文档的内容近乎唯一地标记文档。理论上任何哈希函数都可能发生碰撞，但是发生碰撞的及其小，所以大多数系统(例如git)假设他们使用的哈希函数是没有碰撞的。</p><p>代码版本管理工具git会为每一个版本提交创建一个commit值,这个值是一个SHA-1哈希。</p><h3 id="工作量证明-（Proof-of-Work，PoW）"><a href="#工作量证明-（Proof-of-Work，PoW）" class="headerlink" title="工作量证明 （Proof-of-Work，PoW）"></a>工作量证明 （Proof-of-Work，PoW）</h3><p>一般要求用户进行一些耗时适当的复杂运算，并且答案能被服务方快速验算，以此耗用的时间、设备与能源做为担保成本，以确保服务与资源是被真正的需求所使用。工作量证明最常用的技术原理是散列函数。由于输入散列函数h()的任意值n，会对应到一个h(n)结果，而n只要变动一个比特，就会引起雪崩效应，所以几乎无法从h(n)反推回n，因此借由指定查找h(n)的特征，让用户进行大量的穷举运算，就可以达成工作量证明。现时此技术成为了加密货币的主流共识机制之一，如比特币所采用的技术。</p><h3 id="伪随机数生成"><a href="#伪随机数生成" class="headerlink" title="伪随机数生成"></a>伪随机数生成</h3><p>哈希值可以用作随机数。</p><p>参考:</p><ol><li><a href="https://zh.wikipedia.org/wiki/%E5%B7%A5%E4%BD%9C%E9%87%8F%E8%AD%89%E6%98%8E">维基百科-工作量证明</a></li><li><a href="https://cryptobook.nakov.com/cryptographic-hash-functions/hash-functions-applications">cryptobook</a></li><li>《深入浅出HTTPS:从原理到实战》</li></ol>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 密码学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二叉树的最大深度</title>
      <link href="2020/10/28/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E5%A4%A7%E6%B7%B1%E5%BA%A6/"/>
      <url>2020/10/28/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E5%A4%A7%E6%B7%B1%E5%BA%A6/</url>
      
        <content type="html"><![CDATA[<p>给定一个二叉树，找出其最大深度。</p><p>二叉树的深度为根节点到最远叶子节点的最长路径上的节点数。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">            <span class="number">1</span></span><br><span class="line">          /   \</span><br><span class="line">         <span class="number">2</span>      <span class="number">3</span></span><br><span class="line">        / \    / \ </span><br><span class="line">       <span class="number">4</span>   <span class="number">5</span>  <span class="number">6</span>   <span class="number">7</span></span><br><span class="line">                   \</span><br><span class="line">                    <span class="number">8</span></span><br><span class="line">output: 4</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//递归实现</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">maxDepth</span>(<span class="params">node</span>)</span>&#123;</span><br><span class="line">    <span class="function"><span class="title">if</span>(<span class="params">node==<span class="literal">null</span></span>)</span>&#123;<span class="comment">//终止条件terminating case</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> lefeDepth=maxDepth(node.left);</span><br><span class="line">    <span class="keyword">let</span> rightDepth=maxDepth(node.right);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.max(lefeDepth,rightDepth)+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用JavaScript实现一个简单的编译器</title>
      <link href="2020/10/27/%E7%94%A8JavaScript%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E7%BC%96%E8%AF%91%E5%99%A8/"/>
      <url>2020/10/27/%E7%94%A8JavaScript%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E7%BC%96%E8%AF%91%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p>今天花了一下午时间看了一个<code>JavaScript</code>编译器的实现，并且自己亲手实现了一遍。非常简单的微型编译器，但是却包含了编译器基本的工作流程。一般我们几乎不太能接触到开发编译器工作，但是通过了解编译器的实现原理对我们还是非常有帮助。</p><h2 id="编译器介绍"><a href="#编译器介绍" class="headerlink" title="编译器介绍"></a>编译器介绍</h2><p><code>compiler</code>是将一种语言转换为另外一种语言的程序。</p><h2 id="编译器原理"><a href="#编译器原理" class="headerlink" title="编译器原理"></a>编译器原理</h2><p>大部分编译器的工作可以分为三个阶段：</p><ol><li>Parsing解析 - 解析分为词法分析(<code>Lexical Analysis</code>)和语法分析(<code>Syntactic Analysis</code>)。解析的主要工作是把源代码转换为更加抽象的代码(<code>Abstract Syntax Tree</code> 简称 <code>AST</code>)</li><li>Transformation 转换 - 转换是对<code>AST</code>进行处理，方便后续的代码生成</li><li>Code Generation 代码生成 - 这一步将新的<code>AST</code>转化为新的代码<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//编译流程</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compiler</span>(<span class="params">input</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> tokens = tokenize(input);<span class="comment">//词法分析</span></span><br><span class="line">    <span class="keyword">let</span> ast = parser(tokens);<span class="comment">//语法分析</span></span><br><span class="line">    <span class="keyword">let</span> newAst = transformer(ast);<span class="comment">//ast转换</span></span><br><span class="line">    <span class="keyword">let</span> output = codeGenerator(newAst);<span class="comment">//代码生成</span></span><br><span class="line">    <span class="keyword">return</span> output;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="实现目标"><a href="#实现目标" class="headerlink" title="实现目标"></a>实现目标</h2><p>目标是把<code>lisp</code>代码编译为<code>C</code>的代码</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">*   算术            LISP                      C</span><br><span class="line">*   <span class="number">3</span> + (<span class="number">4</span> - <span class="string">&quot;2&quot;</span>)    (<span class="name">add</span> <span class="number">3</span> (<span class="name">subtract</span> <span class="number">4</span> <span class="string">&quot;2&quot;</span>))    add(<span class="number">3</span>, subtract(<span class="number">4</span>, <span class="string">&quot;2&quot;</span>))</span><br></pre></td></tr></table></figure><h2 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h2><hr><h3 id="词法分析"><a href="#词法分析" class="headerlink" title="词法分析"></a>词法分析</h3><p>词法分析就是把源代码中的“词素”(token)找出来，比如<code>3 + (4 - 2)</code>中的数字<code>3、4、2</code>，左括号<code>(</code>，右括号<code>）</code>，操作符<code>+、-</code>，函数名<code>add</code>。</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">input: </span><br><span class="line">(<span class="name">add</span> <span class="number">3</span> (<span class="name">subtract</span> <span class="number">4</span> <span class="string">&quot;2&quot;</span>))</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">tokens:</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;type&quot;</span>: <span class="string">&quot;paren&quot;</span>,<span class="comment">//左括号</span></span><br><span class="line">        <span class="string">&quot;value&quot;</span>: <span class="string">&quot;(&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;type&quot;</span>: <span class="string">&quot;name&quot;</span>,<span class="comment">//方法名</span></span><br><span class="line">        <span class="string">&quot;value&quot;</span>: <span class="string">&quot;add&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;type&quot;</span>: <span class="string">&quot;number&quot;</span>,<span class="comment">//数字</span></span><br><span class="line">        <span class="string">&quot;value&quot;</span>: <span class="string">&quot;3&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;type&quot;</span>: <span class="string">&quot;paren&quot;</span>,<span class="comment">//左括号</span></span><br><span class="line">        <span class="string">&quot;value&quot;</span>: <span class="string">&quot;(&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;type&quot;</span>: <span class="string">&quot;name&quot;</span>,<span class="comment">//-操作符 </span></span><br><span class="line">        <span class="string">&quot;value&quot;</span>: <span class="string">&quot;subtract&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;type&quot;</span>: <span class="string">&quot;number&quot;</span>,<span class="comment">//数字</span></span><br><span class="line">        <span class="string">&quot;value&quot;</span>: <span class="string">&quot;4&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;type&quot;</span>: <span class="string">&quot;string&quot;</span>,<span class="comment">//字符串</span></span><br><span class="line">        <span class="string">&quot;value&quot;</span>: <span class="string">&quot;2&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;type&quot;</span>: <span class="string">&quot;paren&quot;</span>,<span class="comment">//右括号</span></span><br><span class="line">        <span class="string">&quot;value&quot;</span>: <span class="string">&quot;)&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;type&quot;</span>: <span class="string">&quot;paren&quot;</span>,<span class="comment">//右括号</span></span><br><span class="line">        <span class="string">&quot;value&quot;</span>: <span class="string">&quot;)&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//代码</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">tokenize</span>(<span class="params">input</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> cursor = <span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> tokens = []</span><br><span class="line">    <span class="keyword">while</span> (cursor &lt; input.length) &#123;</span><br><span class="line">        <span class="keyword">let</span> char = input[cursor]</span><br><span class="line">        <span class="keyword">if</span> (<span class="regexp">/\s/</span>.test(char)) &#123; <span class="comment">//空格 则跳过</span></span><br><span class="line">            cursor++;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (char == <span class="string">&#x27;(&#x27;</span>) &#123; <span class="comment">//匹配左括号</span></span><br><span class="line">            tokens.push(&#123;</span><br><span class="line">                type: <span class="string">&quot;paren&quot;</span>,</span><br><span class="line">                value: <span class="string">&quot;(&quot;</span></span><br><span class="line">            &#125;);</span><br><span class="line">            cursor++;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (char == <span class="string">&#x27;)&#x27;</span>) &#123; <span class="comment">//匹配右括号</span></span><br><span class="line">            tokens.push(&#123;</span><br><span class="line">                type: <span class="string">&quot;paren&quot;</span>,</span><br><span class="line">                value: <span class="string">&quot;)&quot;</span></span><br><span class="line">            &#125;);</span><br><span class="line">            cursor++;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="regexp">/\d/</span>.test(char)) &#123; <span class="comment">//匹配数字</span></span><br><span class="line">            <span class="keyword">let</span> value = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">            <span class="keyword">while</span> (<span class="regexp">/\d/</span>.test(char)) &#123;</span><br><span class="line">                value = value + char;</span><br><span class="line">                char = input[++cursor];</span><br><span class="line">            &#125;</span><br><span class="line">            tokens.push(&#123;</span><br><span class="line">                type: <span class="string">&quot;number&quot;</span>,</span><br><span class="line">                value: value</span><br><span class="line">            &#125;)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="regexp">/[a-zA-Z]/</span>.test(char)) &#123; <span class="comment">//匹配变量名</span></span><br><span class="line">            <span class="keyword">let</span> value = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">            <span class="keyword">while</span> (<span class="regexp">/[a-zA-Z]/</span>.test(char)) &#123;</span><br><span class="line">                value = value + char;</span><br><span class="line">                char = input[++cursor];</span><br><span class="line">            &#125;</span><br><span class="line">            tokens.push(&#123;</span><br><span class="line">                type: <span class="string">&quot;name&quot;</span>,</span><br><span class="line">                value: value</span><br><span class="line">            &#125;)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (char == <span class="string">&quot;\&quot;&quot;</span>) &#123; <span class="comment">//匹配字符串</span></span><br><span class="line">            <span class="keyword">let</span> value = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">            <span class="keyword">let</span> char = input[++cursor];</span><br><span class="line">            <span class="keyword">while</span> (char != <span class="string">&quot;\&quot;&quot;</span>) &#123;</span><br><span class="line">                value = value + char;</span><br><span class="line">                char=input[++cursor];</span><br><span class="line">            &#125;</span><br><span class="line">            cursor++;</span><br><span class="line">            tokens.push(&#123;</span><br><span class="line">                type: <span class="string">&quot;string&quot;</span>,</span><br><span class="line">                value: value</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">`unknow character:<span class="subst">$&#123;char&#125;</span>`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> tokens;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="语法分析"><a href="#语法分析" class="headerlink" title="语法分析"></a>语法分析</h3><p>词法分析的结果只是找出了所有的<code>token</code>，但是并没有表述出token之间的关系。语法分析的目的就是创建抽象的语法树<code>AST</code>，之所以叫树，是因为有了层级和节点的关系，能够对源代码的结构有更好的表示。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">input: tokens</span><br><span class="line">output:</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;program&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;body&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;CallExpression&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;add&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;parameters&quot;</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;NumberLiteral&quot;</span>,</span><br><span class="line">                    <span class="attr">&quot;value&quot;</span>: <span class="string">&quot;3&quot;</span></span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;CallExpression&quot;</span>,</span><br><span class="line">                    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;subtract&quot;</span>,</span><br><span class="line">                    <span class="attr">&quot;parameters&quot;</span>: [</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;NumberLiteral&quot;</span>,</span><br><span class="line">                            <span class="attr">&quot;value&quot;</span>: <span class="string">&quot;4&quot;</span></span><br><span class="line">                        &#125;,</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;StringLiteral&quot;</span>,</span><br><span class="line">                            <span class="attr">&quot;value&quot;</span>: <span class="string">&quot;2&quot;</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    ]</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//代码</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">parser</span>(<span class="params">tokens</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> cursor = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">walker</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> token = tokens[cursor];</span><br><span class="line">        <span class="keyword">if</span> (token.type == <span class="string">&quot;number&quot;</span>) &#123;</span><br><span class="line">            cursor++;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                type: <span class="string">&quot;NumberLiteral&quot;</span>,</span><br><span class="line">                value: token.value</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (token.type == <span class="string">&quot;string&quot;</span>) &#123;</span><br><span class="line">            cursor++;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                type: <span class="string">&quot;StringLiteral&quot;</span>,</span><br><span class="line">                value: token.value</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (token.type == <span class="string">&quot;paren&quot;</span> &amp;&amp; token.value == <span class="string">&quot;(&quot;</span>) &#123;</span><br><span class="line">            token = tokens[++cursor];</span><br><span class="line">            <span class="keyword">let</span> node = &#123;</span><br><span class="line">                type: <span class="string">&quot;CallExpression&quot;</span>,</span><br><span class="line">                name: token.value,</span><br><span class="line">                parameters: []</span><br><span class="line">            &#125;;</span><br><span class="line">            token = tokens[++cursor]</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (token.type != <span class="string">&quot;paren&quot;</span> || (token.type == <span class="string">&quot;paren&quot;</span> &amp;&amp; token.value != <span class="string">&quot;)&quot;</span>)) &#123;</span><br><span class="line">                node.parameters.push(walker());</span><br><span class="line">                token = tokens[cursor];</span><br><span class="line">            &#125;</span><br><span class="line">            cursor++;</span><br><span class="line">            <span class="keyword">return</span> node;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;unknow token&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> ast = &#123;</span><br><span class="line">        type: <span class="string">&quot;program&quot;</span>,</span><br><span class="line">        body: []</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (cursor &lt; tokens.length) &#123;</span><br><span class="line">        ast.body.push(walker());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ast;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="AST转换"><a href="#AST转换" class="headerlink" title="AST转换"></a>AST转换</h2><p>转换的作用就是对AST进行修改，使其可以表示同种语言(Babel就是把js转化为js)或者其他语言。转换的过程需要对所有的节点进行处理，这个过程按照深度优先的规则。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">input: ast</span><br><span class="line">output:</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;program&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;body&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;ExpressionStatement&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;expression&quot;</span>: &#123;</span><br><span class="line">                <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;CallExpression&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;callee&quot;</span>: &#123;</span><br><span class="line">                    <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;Identifier&quot;</span>,</span><br><span class="line">                    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;add&quot;</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">&quot;arguments&quot;</span>: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;NumberLiteral&quot;</span>,</span><br><span class="line">                        <span class="attr">&quot;value&quot;</span>: <span class="string">&quot;3&quot;</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;CallExpression&quot;</span>,</span><br><span class="line">                        <span class="attr">&quot;callee&quot;</span>: &#123;</span><br><span class="line">                            <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;Identifier&quot;</span>,</span><br><span class="line">                            <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;subtract&quot;</span></span><br><span class="line">                        &#125;,</span><br><span class="line">                        <span class="attr">&quot;arguments&quot;</span>: [</span><br><span class="line">                            &#123;</span><br><span class="line">                                <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;NumberLiteral&quot;</span>,</span><br><span class="line">                                <span class="attr">&quot;value&quot;</span>: <span class="string">&quot;4&quot;</span></span><br><span class="line">                            &#125;,</span><br><span class="line">                            &#123;</span><br><span class="line">                                <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;StringLiteral&quot;</span>,</span><br><span class="line">                                <span class="attr">&quot;value&quot;</span>: <span class="string">&quot;2&quot;</span></span><br><span class="line">                            &#125;</span><br><span class="line">                        ]</span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//遍历所有的节点，vistor用来处理不同类型的节点</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">traverser</span>(<span class="params">ast, vistor</span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">traverserNodeArray</span>(<span class="params">array, parent</span>) </span>&#123;</span><br><span class="line">        array.forEach(<span class="function"><span class="params">element</span> =&gt;</span> &#123;</span><br><span class="line">            traverserNode(element, parent);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">traverserNode</span>(<span class="params">node, parent</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> methods = vistor[node.type];</span><br><span class="line">        <span class="keyword">if</span> (methods &amp;&amp; methods.enter) &#123;</span><br><span class="line">            methods.enter(node, parent);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">switch</span> (node.type) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;program&quot;</span>:</span><br><span class="line">                traverserNodeArray(node.body, node);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;NumberLiteral&quot;</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;StringLiteral&quot;</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;CallExpression&quot;</span>:</span><br><span class="line">                traverserNodeArray(node.parameters, node);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">throw</span> <span class="built_in">TypeError</span>(node.type);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (methods &amp;&amp; methods.exit) &#123;</span><br><span class="line">            methods.exit(node, parent)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    traverserNode(ast, <span class="literal">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">transformer</span>(<span class="params">ast</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> newAst = &#123;</span><br><span class="line">        type: <span class="string">&quot;program&quot;</span>,</span><br><span class="line">        body: []</span><br><span class="line">    &#125;;</span><br><span class="line">    ast._context = newAst.body;</span><br><span class="line">    traverser(ast, &#123;</span><br><span class="line">        NumberLiteral: &#123;</span><br><span class="line">            enter: <span class="function">(<span class="params">node, parent</span>) =&gt;</span> &#123;</span><br><span class="line">                parent._context.push(&#123;</span><br><span class="line">                    type: <span class="string">&#x27;NumberLiteral&#x27;</span>,</span><br><span class="line">                    value: node.value</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        StringLiteral: &#123;</span><br><span class="line">            enter: <span class="function">(<span class="params">node, parent</span>) =&gt;</span> &#123;</span><br><span class="line">                parent._context.push(&#123;</span><br><span class="line">                    type: <span class="string">&quot;StringLiteral&quot;</span>,</span><br><span class="line">                    value: node.value</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        CallExpression: &#123;</span><br><span class="line">            enter: <span class="function">(<span class="params">node, parent</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">let</span> expression = &#123;</span><br><span class="line">                    type: <span class="string">&quot;CallExpression&quot;</span>,</span><br><span class="line">                    callee: &#123;</span><br><span class="line">                        type: <span class="string">&quot;Identifier&quot;</span>,</span><br><span class="line">                        name: node.name</span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="built_in">arguments</span>: []</span><br><span class="line">                &#125;</span><br><span class="line">                node._context = expression.arguments;</span><br><span class="line">                <span class="keyword">if</span> (parent.type != <span class="string">&quot;CallExpression&quot;</span>) &#123;</span><br><span class="line">                    expression = &#123;</span><br><span class="line">                        type: <span class="string">&#x27;ExpressionStatement&#x27;</span>,</span><br><span class="line">                        expression: expression,</span><br><span class="line">                    &#125;;</span><br><span class="line">                &#125;</span><br><span class="line">                parent._context.push(expression);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> newAst;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="代码生成"><a href="#代码生成" class="headerlink" title="代码生成"></a>代码生成</h2><p>最后一步就是代码生成，这一步会递归调用自身的每一个字节点，每个节点都会生成一个字符串，然后进行拼接。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">input: newAst</span><br><span class="line">output: add(<span class="number">3</span>, subtract(<span class="number">4</span>, <span class="string">&quot;2&quot;</span>));</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//代码</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">codeGenerator</span>(<span class="params">node</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (node.type) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;program&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> node.body.map(codeGenerator).join(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;CallExpression&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> codeGenerator(node.callee) + <span class="string">&#x27;(&#x27;</span> + node.arguments.map(codeGenerator).join(<span class="string">&#x27;, &#x27;</span>) + <span class="string">&#x27;)&#x27;</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;Identifier&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> node.name;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;NumberLiteral&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> node.value;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;StringLiteral&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">`&quot;<span class="subst">$&#123;node.value&#125;</span>&quot;`</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;ExpressionStatement&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> codeGenerator(node.expression) + <span class="string">&quot;;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考:<a href="https://github.com/jamiebuilds/the-super-tiny-compiler]">the-super-tiny-compiler</a></p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 编译器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MacBookPro开发环境配置</title>
      <link href="2020/10/26/MacBookPro%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
      <url>2020/10/26/MacBookPro%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p>由于最近换了新的电脑(MacBookPro 16inch),许多开发环境需要重新配置，记录一下安装的软件。</p><h2 id="环境配置原则"><a href="#环境配置原则" class="headerlink" title="环境配置原则"></a>环境配置原则</h2><ul><li>软件方便统一管理，安装、升级</li><li>优先选择开源的软件</li><li>尽量不污染系统环境</li></ul><h2 id="软件"><a href="#软件" class="headerlink" title="软件"></a>软件</h2><hr><h3 id="brew"><a href="#brew" class="headerlink" title="brew"></a>brew</h3><p>macOS上的包管理工具，很多软件(包括GUI)都可以通过<code>brew</code>来进行安装，卸载，更新。<code>$ brew install</code>用来安装命令行工具，<code>$ brew cask install</code>用来安装GUI工具。</p><h3 id="clashx"><a href="#clashx" class="headerlink" title="clashx"></a>clashx</h3><p>一款开源的代理软件 安装:<code>$ brew cask install clashx</code></p><h3 id="neofetch"><a href="#neofetch" class="headerlink" title="neofetch"></a>neofetch</h3><p>一个用来展示系统参数的命令行工具。安装:<code>$ brew install neofetch</code><br><img src="https://cdn.jsdelivr.net/gh/xiaodang/blog-image/img/20201026210721.png" alt="neofetch"></p><h3 id="zsh-amp-oh-my-zsh"><a href="#zsh-amp-oh-my-zsh" class="headerlink" title="zsh &amp; oh my zsh"></a>zsh &amp; oh my zsh</h3><p>由于Catalina上的默认<code>shell</code>已经从<code>bash</code>改为<code>zsh</code>，所以安装了<code>oh my zsh</code>用来管理<code>zsh</code>的插件，查看本机的默认SHELL只需要在<code>terminal</code>中执行<code>$ echo $SHELL</code>或<code>$ cat /etc/shells | tail -n 1 </code>就可以了。<code>/etc/shells</code>文件里面存放了所有支持的<code>shell</code>,最后一个便是默认的<code>shell</code>。</p><ul><li><p><code>zsh-autosuggestions</code> zsh的智能化提示插件，可以根据历史命令来进行提示。安装:<code>$ brew install zsh-autosuggestions</code><br><img src="https://cdn.jsdelivr.net/gh/xiaodang/blog-image/img/MacBookPro%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE-autosuggestion.png" alt="autosuggestion"></p></li><li><p><code>autojump</code> zsh的目录跳转插件，仅仅输入几个字母就可以<code>cd</code>到目标目录，非常方便。安装:<code>$ brew install autojump</code></p></li></ul><h3 id="vscode"><a href="#vscode" class="headerlink" title="vscode"></a>vscode</h3><p>开发必备IDE，通过命令<code>$ code</code>可以快速在vscode中打开当前目录。安装:<code>$ brew cask install visual-studio-code</code></p><h3 id="rectangle"><a href="#rectangle" class="headerlink" title="rectangle"></a>rectangle</h3><p>一款开源的windows窗口管理软件。可以通过快捷键快速把窗口切分为1/2，4/1，最大化，接近最大化，屏幕中间等。安装:<code>$ brew cask install rectangle</code></p><h3 id="openinterminal-lite"><a href="#openinterminal-lite" class="headerlink" title="openinterminal-lite"></a>openinterminal-lite</h3><p>一款可以快速在当前目录打开<code>terminal</code>的开源软件。安装:<code>$ brew cask install openinterminal-lite</code></p><h3 id="google-chrome"><a href="#google-chrome" class="headerlink" title="google-chrome"></a>google-chrome</h3><p>谷歌浏览器，习惯了它的开发者调试工具。安装:<code>$ brew cask install google-chrome</code></p><h3 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h3><p>一种容器解决方案。可以很方便地对一些服务进行管理。例如：macOS下需要装两个版本的mysql，虽然有实现方案，但是不够优雅。如果使用<code>docker</code>就很简单。只需要创建<code>docker-mysql-version57.yml</code>文件，并且运行<code>$ docker-compose -f docker-mysql-version57.yml -d up</code>即可启动服务。如果需要8.0版本只需要复制一个<code>yml</code>配置文件并修改相关参数即可。安装：<code>brew cask install docker</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#mysql 5.7</span></span><br><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.7&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">db:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql:5.7</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">mysql5.7</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;3306:3306&quot;</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_ROOT_PASSWORD=ysd1991</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;/Users/xiaodang/software/mysql/datadir57:/var/lib/mysql&quot;</span></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">db_data:</span> <span class="literal">null</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="redis"><a href="#redis" class="headerlink" title="redis"></a>redis</h3><p><code>redis</code>同样也选择使用<code>docker</code>安装。创建名为<code>docker-compose.yml</code>的文件，执行<code>$ docker-compose up -d</code>。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.7&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">    <span class="attr">redis:</span></span><br><span class="line">        <span class="attr">hostname:</span> <span class="string">redis</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">redis</span></span><br><span class="line">        <span class="attr">container_name:</span> <span class="string">redis</span></span><br><span class="line">        <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">        <span class="attr">command:</span> <span class="string">redis-server</span> <span class="string">/etc/redis.conf</span></span><br><span class="line">        <span class="attr">environment:</span></span><br><span class="line">             <span class="bullet">-</span> <span class="string">TZ=Asia/Shanghai</span></span><br><span class="line">        <span class="attr">volumes:</span></span><br><span class="line">             <span class="bullet">-</span> <span class="string">./data:/data</span></span><br><span class="line">             <span class="bullet">-</span> <span class="string">./redis.conf:/etc/redis.conf</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">             <span class="bullet">-</span> <span class="string">&quot;6379:6379&quot;</span></span><br><span class="line">    </span><br></pre></td></tr></table></figure><h3 id="redis-cli"><a href="#redis-cli" class="headerlink" title="redis-cli"></a>redis-cli</h3><p>通过<code>docker</code>安装的redis服务，所以本地环境中没有<code>redis-cli</code>工具，通过<a href="https://github.com/aoki/homebrew-redis-cli">homebrew-redis-cli</a>安装</p><h3 id="mysqlworkbench"><a href="#mysqlworkbench" class="headerlink" title="mysqlworkbench"></a>mysqlworkbench</h3><p>一款管理mysql的GUI工具，安装：<code>$ brew cask install mysqlworkbench</code></p><h3 id="nvm"><a href="#nvm" class="headerlink" title="nvm"></a>nvm</h3><p>Node的版本管理工具，由于官方不建议通过<code>brew</code>安装。只能手动:<code>$ curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.36.0/install.sh | bash</code></p><h3 id="pyenv"><a href="#pyenv" class="headerlink" title="pyenv"></a>pyenv</h3><p>python的版本管理工具。由于macOS系统自带的<code>python</code>版本为2.7，并且没有<code>pip</code>，所以较好的实践方法是。用python来安装2.7版本和3.X版本，这样不会因为修改系统的python而出现奇怪的问题。 安装:<code>$ brew install pyenv</code></p><h3 id="picGo"><a href="#picGo" class="headerlink" title="picGo"></a>picGo</h3><p>一款图床工具，可以用<code>GitHub</code>等平台作为图床，用于上传和管理blog里的图片，因为<code>hexo</code>的图片管理真的太难用了。安装：<code>$ brew cask install picGo</code>。<strong>注意</strong>:picGo默认开启了快捷方式shift+command+p，和vscode的Command Palette快捷键冲突，可以选择关闭。</p><h3 id="wireshark"><a href="#wireshark" class="headerlink" title="wireshark"></a>wireshark</h3><p>网络协议分析工具，能够分析所有类型的流量。通关观察数据包，对于理解网络协议也很有帮助。安装:<code>brew cask install wireshark</code></p><h3 id="Charles"><a href="#Charles" class="headerlink" title="Charles"></a>Charles</h3><p>HTTP/HTTPS监控、代理软件，主要用来分析HTTP流量，也可以对请求进行修改、重放等。 安装<code>brew cask install Charles</code></p><h2 id="系统设置"><a href="#系统设置" class="headerlink" title="系统设置"></a>系统设置</h2><hr><ul><li>设置-触控板-开启 轻点来点按</li><li>设置-辅助功能-指针控制-触控板选项-启用三只拖拽</li><li>设置-触控板-光标与点按-查询与数据检查器 三指点按</li><li>设置-程序坞-置于屏幕左边 并 自动显示和隐藏程序坞</li></ul><p><strong>注：以上的软件安装步骤仅做本人记录，完整安装需要查看官方文档，以及安装过程中的log输出。</strong></p>]]></content>
      
      
      <categories>
          
          <category> 开发工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> macOS </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
